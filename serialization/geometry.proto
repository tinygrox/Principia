syntax = "proto2";

import "serialization/quantities.proto";

package principia.serialization;

option cc_enable_arenas = true;

message AffineMap {
  required Frame from_frame = 4;
  required Frame to_frame = 5;
  required Point from_origin = 1;
  required Point to_origin = 2;
  required LinearMap linear_map = 3;
}

message Pair {
  message Element {
    oneof element {
      Multivector multivector = 1;
      Point point = 2;
    }
  }
  required Element t1 = 1;
  required Element t2 = 2;
}

message Point {
  oneof vector {
    Multivector multivector = 1;
    Quantity scalar = 2;
  }
}

message Multivector {
  required Frame frame = 4;
  oneof rank {
    R3Element vector = 1;
    R3Element bivector = 2;
    Quantity trivector = 3;
  }
}

message Quaternion {
  required double real_part = 1;
  required R3Element imaginary_part = 2;
}

message R3Element {
  message Coordinate {
    oneof coordinate {
      double double = 1;
      Quantity quantity = 2;
    }
  }
  required Coordinate x = 1;
  required Coordinate y = 2;
  required Coordinate z = 3;
}

message R3x3Matrix {
  required R3Element row_x = 1;
  required R3Element row_y = 2;
  required R3Element row_z = 3;
}

message Sign {
  required bool negative = 1;
}

message SymmetricBilinearForm {
  required Frame frame = 1;
  required R3x3Matrix matrix = 2;
}

// Linear maps follow.

message LinearMap {
  required Frame from_frame = 1;
  required Frame to_frame = 2;
  extensions 1000 to 1999;  // Last used: 1004.
}

message Identity {
  extend LinearMap {
    optional Identity extension = 1000;
  }
}

message OrthogonalMap {
  extend LinearMap {
    optional OrthogonalMap extension = 1001;
  }
  optional Rotation rotation = 2;
  optional Quaternion quaternion = 3;  // Added in Frege.

  // Pre-Frege.
  reserved 1;
  reserved "determinant";
}

message Permutation {
  extend LinearMap {
    optional Permutation extension = 1002;
  }

  // These enums are used in the definition of the field
  // |coordinate_permutation|.

  // Three two-bit fields which indicate how each coordinate get mapped by the
  // permutation.
  enum Coordinate {
    X = 0;
    Y = 1;
    Z = 2;
  }
  // A three bit field used when using |coordinate_permutation| to index arrays.
  enum Index {
    INDEX = 6;
  }
  // The sign bit gives the sign of the permutation.
  enum Parity {
    EVEN = 0;
    ODD = -2147483648;  // 0x80000000
  }

  // See permutation.hpp for the structure of this field.  We make it signed
  // because the enums above are signed.
  required int32 coordinate_permutation = 1;
}

message Rotation {
  extend LinearMap {
    optional Rotation extension = 1003;
  }
  required Quaternion quaternion = 1;
}

message Signature {
  extend LinearMap {
    optional Signature extension = 1004;
  }
  required Sign x = 1;
  required Sign y = 2;
  required Sign z = 3;
}

// Frames follow.  Note that the names of the enum types are part of the
// serialized representation (|tag_type_fingerprint| field).

message Frame {
  // The frame tags used in the plugin.
  enum PluginTag {
    ALICE_SUN = 1;
    ALICE_WORLD = 2;
    APPARENT = 12;
    APPARENT_WORLD = 19;
    BARYCENTRIC = 7;
    BODY_WORLD = 9;
    // BUBBLE = 13;
    CAMERA = 14;
    CAMERA_REFERENCE = 17;
    CELESTIAL_SPHERE = 8;
    MAIN_BODY_CENTRED = 15;
    NAVBALL = 10;
    NAVIGATION = 4;
    NON_ROTATING_PILE_UP = 11;
    PILE_UP_PRINCIPAL_AXES = 18;
    // PRE_BOREL_BARYCENTRIC = 3;
    RIGID_PART = 16;
    WORLD = 5;
    WORLD_SUN = 6;

    reserved "APPARENT_BUBBLE";
  }

  // The frame tags used in the physics library.
  enum PhysicsTag {
    FRENET = 1;
    PRINCIPAL_AXES = 2;
  }

  // The frame tags used in the astronomical simulations.
  enum SolarSystemTag {
    GCRS = 5;
    ICRS = 2;
    ITRS = 4;
    SKY = 3;
    reserved 1;
    reserved "ICRF_J2000_ECLIPTIC";
  }

  // The frame tags used in tests.
  enum TestTag {
    TEST = 1;
    TEST1 = 2;
    TEST2 = 3;
    TEST3 = 7;
    FROM = 4;
    THROUGH = 5;
    TO = 6;
  }

  required fixed32 tag_type_fingerprint = 1;
  required int32 tag = 2;
  required bool is_inertial = 3;
}
