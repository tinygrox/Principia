syntax = "proto2";

import "serialization/geometry.proto";
import "serialization/integrators.proto";
import "serialization/numerics.proto";
import "serialization/quantities.proto";

package principia.serialization;

option cc_enable_arenas = true;

message BarycentricRotatingDynamicFrame {
  extend DynamicFrame {
    optional BarycentricRotatingDynamicFrame extension = 6001;
  }
  required int32 primary = 1;
  required int32 secondary = 2;
}

message Body {
  oneof body {
    MassiveBody massive_body = 1;
    MasslessBody massless_body = 2;
  }
}

message BodyCentredBodyDirectionDynamicFrame {
  extend DynamicFrame {
    optional BodyCentredBodyDirectionDynamicFrame extension = 6002;
  }
  required int32 primary = 1;
  required int32 secondary = 2;
}

message BodyCentredNonRotatingDynamicFrame {
  extend DynamicFrame {
    optional BodyCentredNonRotatingDynamicFrame extension = 6000;
  }
  required int32 centre = 1;
}

message BodySurfaceDynamicFrame {
  extend DynamicFrame {
    optional BodySurfaceDynamicFrame extension = 6003;
  }
  required int32 centre = 1;
}

message ContinuousTrajectory {
  message InstantaneousDegreesOfFreedom {
    required Point instant = 1;
    required Pair degrees_of_freedom = 2;
  }
  required Quantity step = 1;
  required Quantity tolerance = 2;
  required Quantity adjusted_tolerance = 3;
  required bool is_unstable = 4;
  required int32 degree = 5;
  required int32 degree_age = 6;
  repeated ChebyshevSeries series = 7;  // Pre-Cohen.
  optional Point first_time = 8;
  repeated InstantaneousDegreesOfFreedom last_point = 9;
  optional Point checkpoint_time = 11;  // Added in Fatou.
  // Added in Cohen.
  message InstantPolynomialPair {
    required Point t_max = 1;
    required Polynomial polynomial = 2;
  }
  repeated InstantPolynomialPair instant_polynomial_pair = 10;
}

message DiscreteTrajectory {
  message Downsampling {
    // The instant of the iterator; absent if it is the end of the timeline.
    optional Point start_of_dense_timeline = 1;
    required int64 max_dense_intervals = 2;
    required Quantity tolerance = 3;
  }
  message InstantaneousDegreesOfFreedom {
    required Point instant = 1;
    required Pair degrees_of_freedom = 2;
  }
  message Litter {
    required Point fork_time = 1;
    repeated DiscreteTrajectory trajectories = 2;
  }
  repeated Litter children = 1;
  repeated InstantaneousDegreesOfFreedom timeline = 2;
  repeated int32 fork_position = 3;
  // Added in 陈景润.
  optional Downsampling downsampling = 4;

  // Added in Frobenius.
  message Zfp {
    required int32 codec_version = 1;
    required int32 library_version = 2;
    required bytes timeline = 3;
    required int32 timeline_size = 4;
  }
  optional Zfp zfp = 5;
}

message DynamicFrame {
  extensions 6000 to 6999;  // Last used: 6003.
}

message Ephemeris {
  // Added in Ἐρατοσθένης.
  message AccuracyParameters {
    required Quantity fitting_tolerance = 1;
    required double geopotential_tolerance = 2;
  }
  message AdaptiveStepParameters {
    required AdaptiveStepSizeIntegrator integrator = 1;
    required int64 max_steps = 2;
    required Quantity length_integration_tolerance = 3;
    required Quantity speed_integration_tolerance = 4;
  }
  message FixedStepParameters {
    required FixedStepSizeIntegrator integrator = 1;
    required Quantity step = 2;
  }
  repeated MassiveBody body = 1;
  repeated ContinuousTrajectory trajectory = 2;
  optional AccuracyParameters accuracy_parameters = 10; // Added in Ἐρατοσθένης.
  required FixedStepParameters fixed_step_parameters = 7;
  required IntegratorInstance instance = 9;
  optional Point checkpoint_time = 12;  // Added in Fatou.

  // Pre-Fatou.
  reserved 11;
  reserved "has_checkpoints";
  // Pre-Εὔδοξος.
  reserved 8;
  reserved "t_max";
  // Pre-Ἐρατοσθένης.
  reserved 5;
  reserved "fitting_tolerance";
  // Pre-Cardano.
  reserved 6;
  reserved "last_state";
  // Pre-Буняковский.
  reserved 3, 4;
  reserved "planetary_integrator", "step";
}

message EulerSolver {
  required R3Element moments_of_inertia = 1;
  required Multivector initial_angular_momentum = 2;
  required Rotation initial_attitude = 3;
  required Point initial_time = 4;
}

message HierarchicalSystem {
  message Subsystem {
    required MassiveBody primary = 1;
    // For stability, the satellites are sorted by name.
    repeated Subsystem satellites = 2;
    optional KeplerianElements jacobi_osculating_elements = 3;
  }
  required Subsystem system = 1;
}

message KeplerianElements {
  required Frame frame = 1;
  optional double eccentricity = 2;
  optional Quantity asymptotic_true_anomaly = 9;
  optional Quantity turning_angle = 10;
  optional Quantity semimajor_axis = 3;
  optional Quantity specific_energy = 11;
  optional Quantity characteristic_energy = 12;
  optional Quantity mean_motion = 4;
  optional Quantity period = 13;
  optional Quantity hyperbolic_mean_motion = 14;
  optional Quantity hyperbolic_excess_velocity = 15;
  optional Quantity semiminor_axis = 16;
  optional Quantity impact_parameter = 17;
  optional Quantity semilatus_rectum = 18;
  optional Quantity specific_angular_momentum = 19;
  optional Quantity periapsis_distance = 20;
  optional Quantity apoapsis_distance = 21;
  required Quantity inclination = 5;
  required Quantity longitude_of_ascending_node = 6;
  optional Quantity argument_of_periapsis = 7;
  optional Quantity longitude_of_periapsis = 22;
  optional Quantity true_anomaly = 23;
  optional Quantity mean_anomaly = 8;
  optional Quantity hyperbolic_mean_anomaly = 24;
}

message MassiveBody {
  extensions 2000 to 2999;  // Last used: 2002.
  required Quantity gravitational_parameter = 1;
  required string name = 2;
}

message MasslessBody {}

message OblateBody {
  extend RotatingBody {
    optional OblateBody extension = 4000;
  }
  message Geopotential {
    message GeopotentialRow {
      message GeopotentialColumn {
        required int32 order = 1;
        // j can only be set if order is 0.
        oneof cos_j {
          double cos = 2;
          double j = 4;
        }
        required double sin = 3;
      }
      // For a given |degree|, the |column| array must contain at most
      // |degree + 1| entries.
      required int32 degree = 1;
      repeated GeopotentialColumn column = 2;
    }
    repeated GeopotentialRow row = 1;

    // Pre-Erdős.
    reserved 2, 3;
    reserved "max_degree", "zonal";
  }
  optional Quantity reference_radius = 4;
  oneof oblateness {
    // Unnormalized Degree2SphericalHarmonicCoefficient.
    Quantity pre_diophantos_j2 = 1;
    Geopotential geopotential = 2;  // Normalized.
  }
}

message RigidMotion {
  required AffineMap rigid_transformation = 1;
  required Multivector angular_velocity_of_to_frame = 2;
  required Multivector velocity_of_to_frame_origin = 3;
}

message RotatingBody {
  extend MassiveBody {
    optional RotatingBody extension = 2002;
  }
  extensions 4000 to 4999;  // Last used: 4000.
  required Frame frame = 1;
  optional Quantity min_radius = 9;  // Added in Del Ferro.
  required Quantity mean_radius = 5;
  optional Quantity max_radius = 10;  // Added in Del Ferro.
  required Quantity reference_angle = 2;
  required Point reference_instant = 3;
  required Quantity angular_frequency = 6;
  required Quantity right_ascension_of_pole = 7;
  required Quantity declination_of_pole = 8;

  // Pre-Cardano.
  reserved 4;
  reserved "angular_velocity";
}
